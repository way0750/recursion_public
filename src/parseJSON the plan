parseJSON the plan

	should prabably trim off all the \s everything use this, to make thing easier


	it can parse simple object and array
		if the string, after trimming of the space characters in front and back,  starts with { and end with } then simple object
		if [ and ] then array

		each property or index might have more objects or arrays

		if obj, then find property name and value
		if array then find each indexed item

	it can parse all primitive values
		if the string isn't simple object or array then see if it can be parse as primitive value
		primitive: 
			numbers(interger, float, Infinity, NaN)
			string
				the actual string content has to double quoted!
				'      "  hey how's going?  "      '
				should return: "  hey how's going?  "
			boolean
			null


first trim
	also all value can be either ' value ' or " value "
		no '' are allowed inside of the string
		which means that inner strings have to be " " double quoted
			if inner '' found throw error
			(/\'/).test(str) throw error;
			use trim() to trim;

them check the content obj/arr or primitive?
	(/^[\[\{]/).test(str);

if obj then find key and value


if array then find each value

parse each item / property
	


	Number()
	if str === 'null' then null(this is has too be before Boolean test)
	if Boolean(str) === true or false then true false
	if str[0] and str[str.length-1]  are both \" then it is a string
		and simple str.slice(1, str.length);


parsing object:
	if (/^\{.*\}$/.test(json)){
	//it must be an object
	comma means one set of k-v
	: sets apart k-v


	}





parsing array:

	trim off the first bracket then go through each character one by one
	if runs into a [ then increse bracker count by 1
	if tuns into a ] then decrese bracker count by 1

	have a temp hold or something to hold on to characters
	 start to hold from begin/after a comma
	 end at comma or at the end of string

	when ended, then convert by calling parseJSON again to convert each item

	return item then enter an [arr] and return it;






when comes to string parsing

\n as one character(but special one but still)
\n to stringify it add one more \ === \\n

when escaping one character for JSON stringifying it
	add \ to it

\" or " both are the same anyway since \" has no special function
to escape it and one \ like above:  \\" 




or double quote within double quote has to be escaped

" " " when stringified // " \\" "


normally escaped: " \" " must do this to keep the middle "

but JSON will "\\"" it is the same as "\""
because after evaluation "\\"" evaluate to "\""
the first \ escaped the second \ 's function(aka in this case kept the \ as it is ) so the whole thing evaluate to "\""




so to parse:
	first find all the \s if doouble the amount then divide by 2
	you will get the actual amount to keep

	\\character === \character



'["\\\\\\"\\"a\\""]'

same as ["\\\\\\"\\"a\\""]
then there is only one element which is "\\\\\\"\\"a\\""
then \\1 \\1 \\"1" \\"1"a \\"1"
you should get evaluate to \\""a"
which actaully is 

easy: each level, one \ escape one character after it


double escaping things
	\\n means to escape to single character: \n
	\\" measn to escape to single character: "

	if special letter then escape to \letter
	if not special letter than escape to letter 



now just need to find a way to parse string


maybe should treat string the similar way treaing array and object
using " " as a way to detech data type
	only this is a valid json string value: ' " content " '
	after stripping off space characters from front and end
	check and see if it is still valid
		invalid means have unescape "s in the middle and the very end
		/.*[^\\]["]|\\$/.test(str) if return true then invalid

		AFTER stripping off the space  and the enclosing "s
		return if empty string

		it's invalid if any " without \\
		or \\ at the end

		/.*[^\\]["]|\\$/

		or maybe

		/.*\\[^\"bfnrt]/ and/or /\\"$/ and/or /.*[^\\]"/

		/.*\\[^\"bfnrt]|\\$|.*[^\\]*"/.test()
		use this without the " " first
		then if anything returns true, it's invalid


		to escape:
		run replace 
		\\ is the escape sequence
		if \\bfnrt\\ turn it into \bfnrt\
		if \\" becomes "
		put them into a '' as final result
		find \\n then replace it with an actual escape sequence

		JSON.parse('"\\n\\\\\\""') === '\n\\\"'
		true;
		\n \\ \" are actual functioning escape sequence not cosmetic


		if found \\ then replace with String.fromCharCode(92);
		if \\b then 8
		if \\t then 9
		if \\n then 10
		if \\f then 12
		if \\r then 13
		if \\" then 34


var stringEsc = function(str) {
	return str.slice(1, str.length-1).replace(/\\([bfnrt"\\])/g, function(wholeMatch, specialChar){
		
	});
};




